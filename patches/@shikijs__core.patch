diff --git a/dist/chunk-engines.d.mts b/dist/chunk-engines.d.mts
index 15f5b8d8f4a846a8c67396de77b749d91f34fe22..218b7b450d94d76e84dc06fa229564732a53c23a 100644
--- a/dist/chunk-engines.d.mts
+++ b/dist/chunk-engines.d.mts
@@ -49,6 +49,12 @@ interface JavaScriptRegexEngineOptions {
      * Cache for regex patterns.
      */
     cache?: Map<string, RegExp | Error>;
+    /**
+     * Custom pattern to RegExp constructor.
+     *
+     * By default `oniguruma-to-js` is used.
+     */
+    regexConstructor?: (pattern: string) => RegExp;
 }
 
 export type { Awaitable as A, JavaScriptRegexEngineOptions as J, LoadWasmOptions as L, MaybeArray as M, OnigurumaLoadOptions as O, PatternScanner as P, RequireKeys as R, StringLiteralUnion as S, WebAssemblyInstantiator as W, RegexEngine as a, MaybeGetter as b, MaybeModule as c, RegexEngineString as d, WebAssemblyInstance as e, LoadWasmOptionsPlain as f };
diff --git a/dist/index.d.mts b/dist/index.d.mts
index 9c36b7476d2ba2c352284b4c2d60bf2a03f001a4..da9d733e3b9f3683577915efe4a7b903b911b68e 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -131,6 +131,10 @@ declare function loadWasm(options: LoadWasmOptions): Promise<void>;
 
 declare function createWasmOnigEngine(options?: LoadWasmOptions | null): Promise<RegexEngine>;
 
+/**
+ * The default RegExp constructor for JavaScript regex engine.
+ */
+declare function defaultJavaScriptRegexConstructor(pattern: string): RegExp;
 /**
  * Use the modern JavaScript RegExp engine to implement the OnigScanner.
  *
@@ -470,4 +474,4 @@ declare class ShikiError extends Error {
     constructor(message: string);
 }
 
-export { BundledHighlighterOptions, CodeToHastOptions, CodeToHastRenderOptions, CodeToTokensBaseOptions, CodeToTokensOptions, CodeToTokensWithThemesOptions, type CreateHighlighterFactory, CreatedBundledHighlighterOptions, GrammarState, HighlighterCore, HighlighterCoreOptions, HighlighterGeneric, JavaScriptRegexEngineOptions, LanguageInput, LoadWasmOptions, MaybeArray, MaybeGetter, PlainTextLanguage, Position, RegexEngine, RequireKeys, ShikiError, ShikiInternal, ShikiTransformer, ShikiTransformerContextCommon, ShikiTransformerContextSource, type ShorthandsBundle, SpecialLanguage, SpecialTheme, ThemeInput, ThemeRegistrationAny, ThemeRegistrationResolved, ThemedToken, ThemedTokenWithVariants, TokenStyles, TokenizeWithThemeOptions, TokensResult, addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createHighlighterCore, createHighlighterCoreSync, createJavaScriptRegexEngine, createPositionConverter, createShikiInternal, createShikiInternalSync, createSingletonShorthands, createWasmOnigEngine, createdBundledHighlighter, getHighlighterCore, getShikiInternal, getSingletonHighlighterCore, getTokenStyleObject, toHtml as hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, loadWasm, makeSingletonHighlighter, makeSingletonHighlighterCore, normalizeGetter, normalizeTheme, resolveColorReplacements, setDefaultWasmLoader, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations };
+export { BundledHighlighterOptions, CodeToHastOptions, CodeToHastRenderOptions, CodeToTokensBaseOptions, CodeToTokensOptions, CodeToTokensWithThemesOptions, type CreateHighlighterFactory, CreatedBundledHighlighterOptions, GrammarState, HighlighterCore, HighlighterCoreOptions, HighlighterGeneric, JavaScriptRegexEngineOptions, LanguageInput, LoadWasmOptions, MaybeArray, MaybeGetter, PlainTextLanguage, Position, RegexEngine, RequireKeys, ShikiError, ShikiInternal, ShikiTransformer, ShikiTransformerContextCommon, ShikiTransformerContextSource, type ShorthandsBundle, SpecialLanguage, SpecialTheme, ThemeInput, ThemeRegistrationAny, ThemeRegistrationResolved, ThemedToken, ThemedTokenWithVariants, TokenStyles, TokenizeWithThemeOptions, TokensResult, addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createHighlighterCore, createHighlighterCoreSync, createJavaScriptRegexEngine, createPositionConverter, createShikiInternal, createShikiInternalSync, createSingletonShorthands, createWasmOnigEngine, createdBundledHighlighter, defaultJavaScriptRegexConstructor, getHighlighterCore, getShikiInternal, getSingletonHighlighterCore, getTokenStyleObject, toHtml as hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, loadWasm, makeSingletonHighlighter, makeSingletonHighlighterCore, normalizeGetter, normalizeTheme, resolveColorReplacements, setDefaultWasmLoader, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations };
diff --git a/dist/index.mjs b/dist/index.mjs
index 63c645f5f185d13723170f99f39dbd90d7d7fc49..9acbaa2a30135f2a815260ff67b0a24733804a57 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -6165,15 +6165,30 @@ function onigurumaToRegexp(pattern, options = {}) {
 }
 
 const MAX = 4294967295;
+/**
+ * The default RegExp constructor for JavaScript regex engine.
+ */
+function defaultJavaScriptRegexConstructor(pattern) {
+    return onigurumaToRegexp(pattern
+        .replace(/\|\\G(\||\))/g, '$1')
+        .replace(/(\(|\|)\\G\|/g, '$1')
+        // YAML specific handling; TODO: move to tm-grammars
+        .replaceAll('[^\\s[-?:,\\[\\]{}#&*!|>\'"%@`]]', '[^\\s\\-?:,\\[\\]{}#&*!|>\'"%@`]'), {
+        flags: 'dgm',
+        ignoreContiguousAnchors: true,
+    });
+}
 class JavaScriptScanner {
     patterns;
     cache;
     forgiving;
+    regexConstructor;
     regexps;
-    constructor(patterns, cache, forgiving) {
+    constructor(patterns, cache, forgiving, regexConstructor = defaultJavaScriptRegexConstructor) {
         this.patterns = patterns;
         this.cache = cache;
         this.forgiving = forgiving;
+        this.regexConstructor = regexConstructor;
         this.regexps = patterns.map((p) => {
             const cached = cache?.get(p);
             if (cached) {
@@ -6185,14 +6200,7 @@ class JavaScriptScanner {
                 throw cached;
             }
             try {
-                const regex = onigurumaToRegexp(p
-                    .replace(/\|\\G(\||\))/g, '$1')
-                    .replace(/(\(|\|)\\G\|/g, '$1')
-                    // YAML specific handling; TODO: move to tm-grammars
-                    .replaceAll('[^\\s[-?:,\\[\\]{}#&*!|>\'"%@`]]', '[^\\s\\-?:,\\[\\]{}#&*!|>\'"%@`]'), {
-                    flags: 'dgm',
-                    ignoreContiguousAnchors: true,
-                });
+                const regex = regexConstructor(p);
                 cache?.set(p, regex);
                 return regex;
             }
@@ -6276,7 +6284,7 @@ function createJavaScriptRegexEngine(options = {}) {
     const { forgiving = false, cache = new Map(), } = options;
     return {
         createScanner(patterns) {
-            return new JavaScriptScanner(patterns, cache, forgiving);
+            return new JavaScriptScanner(patterns, cache, forgiving, options.regexConstructor);
         },
         createString(s) {
             return {
@@ -6286,4 +6294,4 @@ function createJavaScriptRegexEngine(options = {}) {
     };
 }
 
-export { FontStyle, ShikiError, addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createHighlighterCore, createHighlighterCoreSync, createJavaScriptRegexEngine, createPositionConverter, createShikiInternal, createShikiInternalSync, createSingletonShorthands, createWasmOnigEngine, createdBundledHighlighter, getHighlighterCore, getShikiInternal, getSingletonHighlighterCore, getTokenStyleObject, toHtml as hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, loadWasm, makeSingletonHighlighter, makeSingletonHighlighterCore, normalizeGetter, normalizeTheme, resolveColorReplacements, setDefaultWasmLoader, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations };
+export { FontStyle, ShikiError, addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createHighlighterCore, createHighlighterCoreSync, createJavaScriptRegexEngine, createPositionConverter, createShikiInternal, createShikiInternalSync, createSingletonShorthands, createWasmOnigEngine, createdBundledHighlighter, defaultJavaScriptRegexConstructor, getHighlighterCore, getShikiInternal, getSingletonHighlighterCore, getTokenStyleObject, toHtml as hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, loadWasm, makeSingletonHighlighter, makeSingletonHighlighterCore, normalizeGetter, normalizeTheme, resolveColorReplacements, setDefaultWasmLoader, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations };
diff --git a/package.json b/package.json
index c50f044b9c812978ac1cf9d1a0b9b42d58e8eea9..dd088b81965980c142195fc0fccd755bc54c493d 100644
--- a/package.json
+++ b/package.json
@@ -60,13 +60,14 @@
     "dist"
   ],
   "dependencies": {
-    "@shikijs/vscode-textmate": "^9.2.0",
-    "@types/hast": "^3.0.4"
+    "hast-util-to-html": "catalog:",
+    "oniguruma-to-js": "catalog:",
+    "vscode-oniguruma": "catalog:"
   },
   "devDependencies": {
-    "hast-util-to-html": "^9.0.2",
-    "oniguruma-to-js": "^0.3.0",
-    "vscode-oniguruma": "^1.7.0"
+    "hast-util-to-html": "catalog:",
+    "oniguruma-to-js": "catalog:",
+    "vscode-oniguruma": "catalog:"
   },
   "scripts": {
     "build": "rimraf dist && rollup -c",
